/*
  Date: 10/2019
  Author: Serhii Marchuk <marchserh@gmail.com>
  
  This example shows how to make bridge (converter) from Modbus RTU to TCP protocol
  It receives messages via Serial port and translate it to TCP remote device.
  In this case used Serial1 (for Arduino MEGA) to receive messages (RTU Slave) and
  ip address '192.168.100.105' of remote device to send (TCP Master)
  Change this settings (or not) to communicate with your Modbus device or simulator.
  
  This program was tested on Arduino MEGA platform

*/


#include <Ethernet.h>
#include <SoftwareSerial.h>

#include <ModbusSlaveBridgeRTU.h>
#include <ModbusMasterTCP.h>

// --------------------------------------------------------------------------------------------------------
// ---------------------------------- INITIALIZE ETHERNET SERVER LIBRARY ----------------------------------
// --------------------------------------------------------------------------------------------------------

// Initialize the Ethernet server library
// with the IP address and port you want to use
// (port 502 is default for Modbus TCP/IP):

// MAC address of current device:
// generated by https://www.miniwebtool.com/mac-address-generator/
byte mac[] = { 0xA0, 0x20, 0xAA, 0x7A, 0xEA, 0x6C };
// IP address of current device:
IPAddress ip(192, 168, 100, 103);


// --------------------------------------------------------------------------------------------------------
// ------------------------------------ INITIALIZE MODBUS TCP MASTER --------------------------------------
// --------------------------------------------------------------------------------------------------------

ModbusMasterTCP mb("192.168.100.105"); // remote ip address (slave)


// --------------------------------------------------------------------------------------------------------
// ---------------------------------------- INITIALIZE SERIAL PORT ----------------------------------------
// --------------------------------------------------------------------------------------------------------

//const int rxPin = 2;
//const int txPin = 3;
//SoftwareSerial softSerial(rxPin, txPin); // RX, TX


// --------------------------------------------------------------------------------------------------------
// -------------------------------------- INITIALIZE MODBUS RTU SLAVE -------------------------------------
// --------------------------------------------------------------------------------------------------------

//ModbusSlaveRTU rtu(&mb, &softSerial);
ModbusSlaveBridgeRTU rtu(&mb, &Serial1);


// --------------------------------------------------------------------------------------------------------
// ------------------------------------------------ SETUP -------------------------------------------------
// --------------------------------------------------------------------------------------------------------

void setup()
{
   // Open serial communications and wait for port to open:
    Serial.begin(9600);
    while (!Serial) // wait for serial port to connect. Needed for native USB port only
        delay(1);
    Serial.println("============================================================");
    Serial.println("================= MODBUS BRIDGE RTU TO TCP =================");
    Serial.println("============================================================");
    // Initialize Ethernet library
    Serial.println("Initialize Ethernet library");  
    Ethernet.begin(mac, ip);
    Serial.print("Ethernet localIP is at ");
    Serial.println(Ethernet.localIP());
    // Initialize SoftSerial instance
    //pinMode(rxPin, INPUT);
    //pinMode(txPin, OUTPUT);
    //softSerial.begin(9600);
    // rtu.setSlave(MODBUS_ADDRESS); no need to set Slave-address. It must be NULL for bridge
    Serial1.begin(9600, SERIAL_8N1);
    // VERBOSE MODE
    rtu.setName("Slave");
    rtu.setVerboseStream(&Serial);
    mb.setName("Master");
    mb.setVerboseStream(&Serial);
}


// --------------------------------------------------------------------------------------------------------
// ------------------------------------------------- LOOP -------------------------------------------------
// --------------------------------------------------------------------------------------------------------

void loop()
{
    rtu.exec();
    delay(1);
}
